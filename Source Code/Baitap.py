import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk, ImageSequence
import pygame.mixer
import os
import sys
class Critter:
    def __init__(self, name):
        # Kh·ªüi t·∫°o Critter v·ªõi t√™n v√† tr·∫°ng th√°i m·∫∑c ƒë·ªãnh-
        self.name = name
        self.hunger = 0
        self.boredom = 0

    def __pass_time(self):
        # TƒÉng ch·ªâ s·ªë ƒë√≥i v√† ch√°n khi ng·ªß
        if self.hunger < 10:
            self.hunger += 2
        if self.boredom < 10:
            self.boredom += 2

    def eat(self):
        # Gi·∫£m ch·ªâ s·ªë ƒë√≥i khi ƒÉn
        self.hunger = min(10, max(0, self.hunger -2))
        if self.hunger>0:
            return f"{self.name} ƒë√£ ƒÉn v√† c·∫£m th·∫•y no h∆°n!"
        elif self.hunger==0:
            return f"{self.name} no l·∫Øm r·ªìi, kh√¥ng ƒÉn n·ªïi n·ªØa"

    def play(self):
        # Gi·∫£m ch·ªâ s·ªë ch√°n khi ch∆°i
        self.boredom = min(10, max(0, self.boredom -2))
        if self.boredom>0:
            return f"{self.name} ƒë√£ ch∆°i v√† r·∫•t vui!"
        elif self.boredom==0:
            return f"{self.name} ch∆°i nhi·ªÅu qu√°, m·ªát r·ªìi!"

    def sleep(self):
        # Critter ng·ªß v√† th·ªùi gian tr√¥i qua
        self.__pass_time()
        return f"{self.name} ƒë√£ ng·ªß !"

    def get_status(self):
        # Tr·∫£ v·ªÅ tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa Critter 
        return f"T√™n: {self.name}\nƒê√≥i: {self.hunger}\nCh√°n: {self.boredom}"

    def get_mood(self):
        # X√°c ƒë·ªãnh t√¢m tr·∫°ng Critter d·ª±a tr√™n ch·ªâ s·ªë ƒë√≥i v√† ch√°n
        if self.hunger > 5 and self.boredom > 5:
            return "handb" 
        elif self.hunger > 5:
            return "hungry"
        elif self.boredom > 5:
            return "bored"
        else:
            return "happy"

    def tick_time(self):
        # TƒÉng ch·ªâ s·ªë ƒë√≥i v√† ch√°n theo th·ªùi gian th·ª±c
        if self.hunger < 10:
            self.hunger += 1
        if self.boredom < 10:
            self.boredom += 1

class CritterApp:
    def __init__(self, root):
        # Kh·ªüi t·∫°o giao di·ªán v√† c√°c th√†nh ph·∫ßn ch√≠nh c·ªßa ·ª©ng d·ª•ng
        self.root = root
        self.root.title("ChƒÉm S√≥c Th√∫ ·∫¢o")
        self.root.geometry("1920x1080")
        self.root.attributes('-fullscreen', True)
        self.root.bind("<Escape>", lambda event: self.root.attributes('-fullscreen', False))
        self.critter = None

        self.current_animation = None
        self.current_animation_index = 0

        # Load h√¨nh n·ªÅn
        self.bg_image = None
        try:
            bg_path = resource_path(os.path.join("Resource_pack", "background.png"))
            if os.path.exists(bg_path):
                img = Image.open(bg_path).resize((1920, 1080), Image.LANCZOS)
                self.bg_image = ImageTk.PhotoImage(img)
                self.bg_label = tk.Label(root, image=self.bg_image)
                self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)
            else:
                raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y {bg_path}")
        except Exception as e:
            self.bg_label = tk.Label(root, text=f"L·ªói t·∫£i n·ªÅn: {str(e)}", bg="gray")
            self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        # Khung hi·ªÉn th·ªã th√∫ c∆∞ng
        self.pet_frame = tk.LabelFrame(root, text="üêæ Th√∫ C∆∞ng üêæ", 
                               font=("Times New Roman", 18, "bold"), bg="#FFFFFF", fg="#4A148C", 
                               bd=6, relief="ridge")
        self.pet_frame.place(x=50, y=100, width=350, height=300)

        self.pet_label = tk.Label(self.pet_frame, text="Ch∆∞a c√≥ Th√∫ C∆∞ng", 
                          font=("Times New Roman", 16, "italic"), bg="#FFFFFF", fg="#4A148C")
        self.pet_label.pack(expand=True, padx=10, pady=10)

        # Khung thao t√°c
        self.action_frame = tk.LabelFrame(root, text="üéÆ T∆∞∆°ng t√°c üéÆ", 
                                  font=("Times New Roman", 18, "bold"), bg="#FFFFFF", fg="#4A148C", 
                                  bd=6, relief="ridge")
        self.action_frame.place(x=450, y=100, width=500, height=500)

        # Nh√£n v√† √¥ nh·∫≠p t√™n Critter
        self.name_label = tk.Label(self.action_frame, text="Nh·∫≠p t√™n th√∫ c∆∞ng:", 
                           font=("Times New Roman", 16, "bold"), bg="#FFFFFF", fg="#6F068A")
        self.name_label.place(x=10, y=20)

        self.name_entry = tk.Entry(self.action_frame, font=("Times New Roman", 16), bd=2, relief="solid", bg="#FFF9C4", fg="#4A148C")
        self.name_entry.place(x=180, y=20, width=280)

        self.create_button = ttk.Button(self.action_frame, text="üöÄ T·∫°o Th√∫ C∆∞ng", command=self.create_critter)
        self.create_button.place(x=170, y=70, width=150)
        self.create_button.bind('<Button-1>', self.play_click_sound)

        # C√°c n√∫t Cho ƒÉn, Ch∆°i, Ng·ªß
        self.eat_button = ttk.Button(self.action_frame, text="üçΩÔ∏èCho ƒÉn", command=self.eat, state=tk.DISABLED)
        self.eat_button.place(x=10, y=120, width=150)
        self.eat_button.bind('<Button-1>', self.play_click_sound)

        self.play_button = ttk.Button(self.action_frame, text="üéæCh∆°i", command=self.play, state=tk.DISABLED)
        self.play_button.place(x=170, y=120, width=150)
        self.play_button.bind('<Button-1>', self.play_click_sound)

        self.sleep_button = ttk.Button(self.action_frame, text="üåôNg·ªß", command=self.sleep, state=tk.DISABLED)
        self.sleep_button.place(x=330, y=120, width=150)
        self.sleep_button.bind('<Button-1>', self.play_click_sound)

        # Tr·∫°ng th√°i c·ªßa Critter
        self.status_label = tk.Label(self.action_frame, text="Ch∆∞a c√≥ Th√∫ C∆∞ng", 
                                        font=("Times New Roman", 16, "italic"), bg="#FFF9C4", fg="#4A148C", 
                                        wraplength=480, justify="left", bd=4, relief="groove")
        self.status_label.place(x=10, y=180, width=480, height=280)

        # C·∫•u h√¨nh style cho n√∫t ttk
        style = ttk.Style()
        style.theme_use("clam")
        style.configure("TButton", font=("Times New Roman", 14), padding=5)

        # Load ·∫£nh ho·∫°t h√¨nh cho Critter theo tr·∫°ng th√°i
        self.pet_images = {}
        for mood in ["happy", "hungry", "bored","handb"]:
            try:
                gif_path = resource_path(os.path.join("Resource_pack", f"pet_{mood}.gif"))
                if os.path.exists(gif_path):
                    im = Image.open(gif_path)
                    frames = []
                    for frame in ImageSequence.Iterator(im):
                        frame = frame.resize((200, 200), Image.LANCZOS)
                        frames.append(ImageTk.PhotoImage(frame))
                    self.pet_images[mood] = frames
                else:
                    raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y {gif_path}")
            except Exception as e:
                self.pet_images[mood] = None
                print(f"L·ªói t·∫£i ·∫£nh pet_{mood}: {str(e)}")

        # Kh·ªüi t·∫°o pygame mixer v√† ph√°t nh·∫°c n·ªÅn
        self.background_music = None
        self.click_sound = None
        try:
            pygame.mixer.init()
            music_path = resource_path(os.path.join("Sound_pack", "background_music.mp3"))
            click_sound_path = resource_path(os.path.join("Sound_pack", "click_sound.mp3"))
            if os.path.exists(music_path):
                self.background_music = pygame.mixer.Sound(music_path)
                self.background_music.play(-1)
            else:
                raise FileNotFoundError("Kh√¥ng t√¨m th·∫•y background_music.wav ho·∫∑c background_music.mp3")
            if os.path.exists(click_sound_path):
                self.click_sound = pygame.mixer.Sound(click_sound_path)
            else:
                print(f"Kh√¥ng t√¨m th·∫•y {click_sound_path}")
        except Exception as e:
            print(f"L·ªói t·∫£i nh·∫°c n·ªÅn: {str(e)}")

    def update_realtime(self):
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† h√¨nh ·∫£nh real-time
        if self.critter:
            self.critter.tick_time()
            self.update_status()
            self.update_pet_image()
        self.root.after(2000, self.update_realtime)  # L·∫∑p l·∫°i sau 2 gi√¢y

    def create_critter(self):
        # T·∫°o Critter m·ªõi v·ªõi t√™n nh·∫≠p v√†o
        name = self.name_entry.get().strip()
        if not name:
            self.status_label.config(text="L·ªói: Vui l√≤ng nh·∫≠p t√™n cho th√∫ c∆∞ng!")
            return
        self.critter = Critter(name)
        self.update_status()
        self.update_pet_image()
        self.eat_button.config(state=tk.NORMAL)
        self.play_button.config(state=tk.NORMAL)
        self.sleep_button.config(state=tk.NORMAL)
        self.status_label.config(text=f"ƒê√£ t·∫°o th√∫ c∆∞ng {name}!\n{self.critter.get_status()}")
        self.update_realtime()  # B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t real-time khi t·∫°o th√∫ c∆∞ng

    def eat(self):
        # X·ª≠ l√Ω s·ª± ki·ªán cho Critter ƒÉn
        if self.critter:
            message = self.critter.eat()
            self.update_status(message)
            self.update_pet_image()
        else:
            self.status_label.config(text="L·ªói: H√£y t·∫°o m·ªôt th√∫ c∆∞ng tr∆∞·ªõc!")

    def play(self):
        # X·ª≠ l√Ω s·ª± ki·ªán cho Critter ch∆°i
        if self.critter:
            message = self.critter.play()
            self.update_status(message)
            self.update_pet_image()
        else:
            self.status_label.config(text="L·ªói: H√£y t·∫°o m·ªôt th√∫ c∆∞ng tr∆∞·ªõc!")

    def sleep(self):
        # X·ª≠ l√Ω s·ª± ki·ªán cho Critter ng·ªß
        if self.critter:
            message = self.critter.sleep()
            self.update_status(message)
            self.update_pet_image()
        else:
            self.status_label.config(text="L·ªói: H√£y t·∫°o m·ªôt th√∫ c∆∞ng tr∆∞·ªõc!")

    def update_status(self, message=""):
        # C·∫≠p nh·∫≠t tr·∫°ng th√°i Critter tr√™n giao di·ªán
        if self.critter:
            status = self.critter.get_status()
            if message:
                self.status_label.config(text=f"{message}\n{status}")
            else:
                self.status_label.config(text=status)
        else:
            self.status_label.config(text="Ch∆∞a c√≥ Th√∫ C∆∞ng")

    def update_pet_image(self):
        # C·∫≠p nh·∫≠t ·∫£nh ƒë·ªông c·ªßa Critter theo tr·∫°ng th√°i
        if self.critter:
            mood = self.critter.get_mood()
            frames = self.pet_images.get(mood)
            if frames:
                self.current_animation = frames
                self.current_animation_index = 0
                self.animate()
            else:
                self.pet_label.config(image="", text=f"Kh√¥ng t√¨m th·∫•y ·∫£nh pet_{mood}.gif")
        else:
            self.pet_label.config(image="", text="Ch∆∞a c√≥ Th√∫ C∆∞ng")

    def animate(self):
        # Hi·ªÉn th·ªã ·∫£nh ƒë·ªông cho Critter
        if self.current_animation:
            frame = self.current_animation[self.current_animation_index]
            self.pet_label.config(image=frame, text="")
            self.pet_label.image = frame
            self.current_animation_index = (self.current_animation_index + 1) % len(self.current_animation)
            self.root.after(200, self.animate)

    def play_click_sound(self, event=None):
        # Ph√°t √¢m thanh khi nh·∫•n n√∫t
        if self.click_sound:
            self.click_sound.stop()
            self.click_sound.play()

def resource_path(relative_path):
    # L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn t√†i nguy√™n (d√πng cho c·∫£ .py v√† .exe)
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

if __name__ == "__main__":
    # Ch·∫°y ·ª©ng d·ª•ng CritterApp
    root = tk.Tk()
    app = CritterApp(root)
    root.mainloop()